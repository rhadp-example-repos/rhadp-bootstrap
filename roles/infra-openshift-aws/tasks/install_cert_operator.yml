# Implement your install deployment tasks here
# -------------------------------------------------

- name: install cert-manager operator
  include_role:
    name: roles/install-operator
  vars:
    operator_name: "openshift-cert-manager-operator"
    operator_group_name: "openshift-cert-manager-operator"
    operator_subscription_name: "openshift-cert-manager-operator"
    operator_namespace: "{{ cert_manager_namespace }}"
    operator_deployment_name: "{{ cert_manager_deployment_name }}"
    subscription_channel: "{{ cert_manager_subscription_channel }}"
    subscription_starting_csv: "{{ cert_manager_subscription_starting_csv }}"
    install_plan_approval: "Automatic"
    create_operator_namespace: true
    create_operator_group: true
    wait_for_operator: true

- name: create AWS credentials secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: route53-credentials
        namespace: "{{ item }}"
      type: Opaque
      data:
        access-key-id: "{{ aws_access_key_id | b64encode }}"
        secret-access-key: "{{ aws_secret_access_key | b64encode }}"
    state: present
    apply: yes
    kubeconfig: "{{ local_kubeconfig_file }}"
  with_items: # FIXME: check which namespaces are needed
    - "{{ cert_manager_namespace }}"
    - "cert-manager"
    - "openshift-ingress"
    - "openshift-ingress-operator"

- name: fix permissions
  k8s:
    state: present
    apply: yes
    definition: "{{ lookup('template', item ) | from_yaml }}"
    kubeconfig: "{{ local_kubeconfig_file }}"
  loop:
    - role_cert_manager.yml.j2
    - rb_cert_manager.yml.j2

- name: create cert-manager instance
  k8s:
    definition:
      apiVersion: operator.openshift.io/v1alpha1
      kind: CertManager
      metadata:
        name: cluster
      spec:
        managementState: "Managed"
        logLevel: Normal
        operatorLogLevel: Normal
        unsupportedConfigOverrides:
          controller:
            args:
              - "--dns01-recursive-nameservers=1.1.1.1:53"
              - "--dns01-recursive-nameservers-only"
    state: present
    apply: yes
    kubeconfig: "{{ local_kubeconfig_file }}"

- name: pause to allow cert-manager to start
  pause:
    seconds: 180

- name: create Let's Encrypt prod ClusterIssuer
  k8s:
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-prod
      spec:
        acme:
          server: https://acme-v02.api.letsencrypt.org/directory
          email: "{{ letsencrypt_email }}"
          privateKeySecretRef:
            name: letsencrypt-prod
          solvers:
            - dns01:
                route53:
                  region: "{{ aws_default_region }}"
                  hostedZoneID: "{{ cluster_public_zone_id }}"
                  accessKeyID: "{{ aws_access_key_id }}"
                  secretAccessKeySecretRef:
                    name: route53-credentials
                    key: secret-access-key
              selector:
                dnsZones:
                  - "apps.{{ cluster_base_domain }}"
                  - "api.{{ cluster_base_domain }}"
    state: present
    apply: yes
    kubeconfig: "{{ local_kubeconfig_file }}"

- name: wait for cluster issuer to be ready
  pause:
    seconds: 180

- name: create wildcard certificate for default ingress
  k8s:
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: default-ingress-cert
        namespace: openshift-ingress
        annotations:
          cert-manager.io/revision-history-limit: "3"
      spec:
        secretName: default-ingress-cert
        secretTemplate:
          annotations:
            cert-manager.io/allow-direct-injection: "true"
          labels:
            cert-manager.io/certificate-name: default-ingress-cert
        issuerRef:
          name: letsencrypt-prod
          kind: ClusterIssuer
          group: cert-manager.io
        usages:
          - "server auth"
          - "client auth"
        dnsNames:
          - "*.apps.{{ cluster_base_domain }}"
          - "apps.{{ cluster_base_domain }}"
        duration: 2160h # 90 days
        renewBefore: 168h # 1 week
    state: present
    apply: yes
    kubeconfig: "{{ local_kubeconfig_file }}"

- name: wait for certificate to be ready
  k8s_info:
    api_version: cert-manager.io/v1
    kind: Certificate
    name: default-ingress-cert
    namespace: openshift-ingress
    kubeconfig: "{{ local_kubeconfig_file }}"
  register: r_certificate
  retries: 60
  delay: 10
  until:
    - r_certificate.resources | length | int > 0

- name: wait for certificate to be ready
  pause:
    seconds: 120

- name: configure ingress controller to use the certificate
  k8s:
    definition:
      apiVersion: operator.openshift.io/v1
      kind: IngressController
      metadata:
        name: default
        namespace: openshift-ingress-operator
      spec:
        defaultCertificate:
          name: default-ingress-cert
    state: present
    merge_type: merge
    kubeconfig: "{{ local_kubeconfig_file }}"
